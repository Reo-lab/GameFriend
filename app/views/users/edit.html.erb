<%= render "layouts/sidemenu"%>
<% breadcrumb :user_edit %>
<%= render 'layouts/breadcrumbs' %>
<div class = "user-edit-title">プロフィール編集</div>
<%= form_with(model: @user, local: true, class: 'user-form') do |form| %>
  <div class="form-group">
    <%= form.label :name, '名前', class: 'form-label' %>
    <%= form.text_field :name, class: 'form-control' %>
  </div>

  <div class="form-group">
    <%= form.label :gender, '性別', class: 'form-label' %>
    <%= form.select :gender, ['Male', 'Female'], {}, class: 'form-control' %>
  </div>

  <div class="form-group">
    <%= form.label :age, '年齢', class: 'form-label' %>
    <%= form.number_field :age, class: 'form-control' %>
  </div>

  <div class="form-group">
    <%= form.label :discord, 'ディスコードユーザー名', class: 'form-label' %>
    <%= form.text_field :discord, class: 'form-control' %>
  </div>
  
  <div class="form-group">
    <%= form.label :bio, 'プロフィール紹介文', class: 'form-label' %>
    <%= form.text_area :bio, rows: 5, class: 'form-control' %>
  </div>

  <div class="form-group">
    <%= form.label :icon_image, 'アイコン画像', class: 'form-label' %>
    <%= form.file_field :icon_image, id: 'icon_image_input', class: 'form-control-file' %>
  </div>

  <%= form.hidden_field :cropped_icon, id: 'cropped_icon' %> 

  <div class="form-group">
    <%= form.submit '更新する', class: 'btn btn-primary' %>
  </div>
<% end %>

<div id="cropModal" style="display: none;">
  <img id="cropper_image" style="max-width: 100%;">
  <button id="cropButton">トリミングする</button>
</div>

<script>
document.addEventListener('turbo:load', function() {
  const imageInput = document.getElementById('icon_image_input');
  const cropperImage = document.getElementById('cropper_image');
  const cropModal = document.getElementById('cropModal');
  let cropper;

  // 画像が選択されたとき
  imageInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    const reader = new FileReader();

    reader.onload = function(e) {
      // モーダルを表示してCropper.jsを初期化
      cropperImage.src = e.target.result;
      cropModal.style.display = 'block';

      // Cropper.jsを作成
      cropper = new Cropper(cropperImage, {
        aspectRatio: 1, // 正方形
        viewMode: 1
      });
    };

    reader.readAsDataURL(file);
  });

  // トリミング後の画像を保存
  document.getElementById('cropButton').addEventListener('click', function() {
    const croppedCanvas = cropper.getCroppedCanvas();
    
    // croppedCanvasをBase64に変換し、hidden fieldにセット
    croppedCanvas.toBlob(function(blob) {
      const reader = new FileReader();
      reader.onloadend = function() {
        const base64data = reader.result;
        document.getElementById('cropped_icon').value = base64data;
      };
      reader.readAsDataURL(blob);

      // モーダルを非表示にする
      cropModal.style.display = 'none';
    });
  });
});
</script>